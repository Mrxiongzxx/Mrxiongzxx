package main

import "fmt"

//4.1 Array
//和以往认知的数组有很⼤不同。
//• 数组是值类型，赋值和传参会复制整个数组，⽽不是指针。
//• 数组⻓度必须是常量，且是类型的组成部分。[2]int 和 [3]int 是不同类型。
//• ⽀持 "=="、"!=" 操作符，因为内存总是被初始化过的。
//• 指针数组 [n]*T，数组指针 *[n]T。

func main()  {
	a := [3]int{1, 2} // 未初始化元素值为 0。
	b := [...]int{1, 2, 3, 4} // 通过初始化值确定数组⻓度。
	c := [5]int{2: 100, 4:200} // 使⽤索引号初始化元素。
	d := [...]struct {
		name string
		age uint8
	}{
		{"user1", 10}, // 可省略元素类型。
		{"user2", 20}, // 别忘了最后⼀⾏的逗号。
	}
	//多维数组
	e := [2][3]int{{1,2,3},{4,5,6}}
	f := [...][2]int{{1,2},{3,4}} //第二维度不能用...


	g := [2]int{}
	fmt.Printf("g: %p\n", &g)
	test(g)
	fmt.Println(g)
	//输出：
	//a: 0x2101f9150
	//x: 0x2101f9170
	//[0 0]

	fmt.Println(a,b,c,d,e,f)
}

//值拷⻉⾏为会造成性能问题，通常会建议使⽤ slice，或数组指针。
func test(x [2]int) {
	fmt.Printf("x: %p\n", &x)
	x[1] = 1000
}


//内置函数 len 和 cap 都返回数组⻓度 (元素数量)。
//a := [2]int{}
//println(len(a), cap(a)) // 2, 2